name: Authentication Regression Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server/replitAuth.ts'
      - 'server/routes.ts'
      - 'server/storage.ts'
      - 'shared/schema.ts'
      - 'tests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'server/replitAuth.ts'
      - 'server/routes.ts'
      - 'server/storage.ts'
      - 'shared/schema.ts'
      - 'tests/**'

jobs:
  auth-security-tests:
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: test
      REPLIT_DOMAINS: test.replit.dev
      REPL_ID: test-repl-id
      SESSION_SECRET: test-session-secret-for-ci-only
      DATABASE_URL: postgresql://test:test@localhost:5432/test_db
      ISSUER_URL: https://replit.com/oidc

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup database schema
      run: npm run db:push

    - name: Run critical authentication tests
      run: |
        echo "Running critical authentication regression tests..."
        npx vitest tests/integration/auth-simple.test.ts --run --reporter=verbose
      continue-on-error: false

    - name: Run TypeScript check on auth files
      run: |
        echo "Checking TypeScript compilation for auth files..."
        npx tsc --noEmit server/replitAuth.ts server/routes.ts
      continue-on-error: false

    - name: Test authentication endpoints
      run: |
        echo "Testing authentication endpoints are properly configured..."
        # Start server in background for endpoint testing
        NODE_ENV=test npm run dev &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test critical endpoints
        echo "Testing /api/login endpoint..."
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/login)
        if [ "$RESPONSE" = "400" ] || echo "$RESPONSE" | grep -q "upload"; then
          echo "❌ CRITICAL: Login endpoint returning upload errors!"
          kill $SERVER_PID
          exit 1
        fi
        echo "✅ Login endpoint responding correctly: $RESPONSE"
        
        echo "Testing /api/auth/user endpoint..."
        AUTH_RESPONSE=$(curl -s http://localhost:5000/api/auth/user)
        if echo "$AUTH_RESPONSE" | grep -q "upload"; then
          echo "❌ CRITICAL: Auth endpoint returning upload errors!"
          kill $SERVER_PID
          exit 1
        fi
        echo "✅ Auth endpoint responding correctly"
        
        # Clean up
        kill $SERVER_PID
        sleep 2

    - name: Run unit tests for auth middleware
      run: |
        echo "Running unit tests for authentication middleware..."
        npx vitest tests/unit/storage.test.ts --run
        npx vitest tests/unit/anomaly-detector.test.ts --run
      continue-on-error: false

    - name: Check for authentication regressions
      run: |
        echo "Checking for common authentication regressions..."
        
        # Check that replitAuth.ts doesn't have TypeScript errors
        if ! npx tsc --noEmit server/replitAuth.ts; then
          echo "❌ CRITICAL: TypeScript errors in replitAuth.ts"
          exit 1
        fi
        
        # Check that routes.ts imports auth correctly
        if ! grep -q "import.*replitAuth" server/routes.ts; then
          echo "❌ CRITICAL: routes.ts not importing authentication"
          exit 1
        fi
        
        # Check that auth middleware is applied
        if ! grep -q "isAuthenticated" server/routes.ts; then
          echo "❌ CRITICAL: Authentication middleware not applied to routes"
          exit 1
        fi
        
        echo "✅ All authentication regression checks passed"

    - name: Generate test report
      if: always()
      run: |
        echo "## Authentication Test Results" > auth-test-results.md
        echo "- Date: $(date)" >> auth-test-results.md
        echo "- Commit: ${{ github.sha }}" >> auth-test-results.md
        echo "- Branch: ${{ github.ref_name }}" >> auth-test-results.md
        echo "" >> auth-test-results.md
        
        if [ $? -eq 0 ]; then
          echo "✅ All authentication tests passed" >> auth-test-results.md
        else
          echo "❌ Authentication tests failed" >> auth-test-results.md
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: auth-test-results
        path: auth-test-results.md
        retention-days: 30

  security-check:
    runs-on: ubuntu-latest
    needs: auth-security-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        echo "Running security audit on authentication dependencies..."
        npm audit --audit-level=moderate --omit=dev
      continue-on-error: true

    - name: Check for hardcoded secrets
      run: |
        echo "Checking for hardcoded secrets in auth files..."
        
        # Check for potential hardcoded secrets (excluding test files)
        if grep -r --include="*.ts" --include="*.js" --exclude-dir=tests \
           -E "(password|secret|key|token).*=.*['\"][^'\"]{10,}['\"]" server/; then
          echo "❌ WARNING: Potential hardcoded secrets found"
          exit 1
        fi
        
        echo "✅ No hardcoded secrets detected"